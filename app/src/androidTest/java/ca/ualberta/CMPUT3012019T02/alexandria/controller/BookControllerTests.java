package ca.ualberta.CMPUT3012019T02.alexandria.controller;

import org.junit.After;
import org.junit.Before;
import org.junit.Test;

import java.util.Collection;
import java.util.UUID;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.TimeUnit;
import java.util.concurrent.TimeoutException;

import ca.ualberta.CMPUT3012019T02.alexandria.model.Book;
import ca.ualberta.CMPUT3012019T02.alexandria.model.user.BorrowedBook;
import ca.ualberta.CMPUT3012019T02.alexandria.model.user.OwnedBook;
import java9.util.Optional;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertFalse;
import static org.junit.Assert.assertNull;
import static org.junit.Assert.assertTrue;

public class BookControllerTests {

    private class LoginInfo {
        private final String username;
        private final String password;
        LoginInfo(String username, String password) {
            this.username = username;
            this.password = password;
        }
    }

    private BookController bookController = BookController.getInstance();
    private UserController userController = UserController.getInstance();

    /* Utility methods */

    private LoginInfo generateRandomUser() throws InterruptedException, ExecutionException, TimeoutException {
        // Assumes that UserController is working correctly
        userController.deauthenticate();
        String username = "test_" + UUID.randomUUID().toString().replace('-', '_');
        String password = UUID.randomUUID().toString();
        String email = username + "@example.com";
        userController.createUser("John Smith", email, "7801234567", null, username, password).get();
        return new LoginInfo(username, password);
    }

    private void authenticate(LoginInfo loginInfo) throws InterruptedException, ExecutionException, TimeoutException {
        userController.deauthenticate(); // Invalidates cache as well
        userController.authenticate(loginInfo.username, loginInfo.password).get();
    }

    private void assertBooksEqual(Book expected, Book actual) {
        assertEquals(expected.getIsbn(), actual.getIsbn());
        assertEquals(expected.getAuthor(), actual.getAuthor());
        assertEquals(expected.getTitle(), actual.getTitle());
        assertEquals(expected.getDescription(), actual.getDescription());
        assertEquals(expected.getImageId(), actual.getImageId());
    }

    private Book generateRandomBook() {
        return new Book("test_" + UUID.randomUUID().toString().replace('-', '_'), "Test Book", "BookControllerTests.java", "This book was automatically generated by a unit test for testing purposes. This book can safely be deleted.", null);
    }

    @Before
    public void prepare() {
        userController.deauthenticate();
    }

    @After
    public void cleanUp() {
        userController.deauthenticate();
    }

    @Test
    public void testCoreTransactionProcess() throws InterruptedException, ExecutionException, TimeoutException {
        /* Methods tested
            -   BookController#addBook
            -   BookController#getBook
            -   BookController#getMyBorrowedBook
            -   BookController#addMyOwnedBook
            -   BookController#getUserOwnedBook
            -   BookController#requestBook
            -   BookController#cancelRequest
            -   BookController#acceptRequest
            -   BookController#declineRequest
            -   BookController#scanMyBorrowedBook
            -   BookController#scanMyOwnedBook
            -   BookController#exchange
            -   BookController#returnBook
        */

        // Create users to test with
        LoginInfo owner = generateRandomUser();
        LoginInfo borrower1 = generateRandomUser();
        LoginInfo borrower2 = generateRandomUser();
        LoginInfo borrower3 = generateRandomUser();
        LoginInfo borrower4 = generateRandomUser();

        // Get user ids
        authenticate(owner);
        String ownerId = userController.getMyId();
        authenticate(borrower1);
        String borrower1Id = userController.getMyId();
        authenticate(borrower2);
        String borrower2Id = userController.getMyId();
        authenticate(borrower3);
        String borrower3Id = userController.getMyId();
        authenticate(borrower4);
        String borrower4Id = userController.getMyId();

        // Create new book to test with
        Book book = generateRandomBook();

        bookController.addBook(book).get(5, TimeUnit.SECONDS);
        Book verify = bookController.getBook(book.getIsbn()).get(5, TimeUnit.SECONDS).get();
        assertBooksEqual(book, verify); // Tests BookController#addBook and BookController#getBook

        /* Add an owned book. Make a book request. Borrowed and Owned Book status transition from 'available' to 'requested' */

        authenticate(owner); { // Tests BookController#addMyOwnedBook
            bookController.addMyOwnedBook(new OwnedBook(book.getIsbn())).get(5, TimeUnit.SECONDS);
        }

        authenticate(borrower1); { // Tests BookController#requestBook with the book being available
            bookController.requestBook(book.getIsbn(), ownerId).get(5, TimeUnit.SECONDS);
        }

        /* Verify State */ {

            /* authenticate(borrower1); */ { // Tests BookController#getMyBorrowedBook
                BorrowedBook borrowedBook = bookController.getMyBorrowedBook(book.getIsbn()).get(5, TimeUnit.SECONDS).get();
                assertEquals(ownerId, borrowedBook.getOwner());
                assertEquals("requested", borrowedBook.getStatus());
                assertFalse(borrowedBook.getScanned());
            }

            authenticate(owner); { // Tests BookController#getMyOwnedBook
                OwnedBook ownedBook = bookController.getMyOwnedBook(book.getIsbn()).get(5, TimeUnit.SECONDS).get();
                assertEquals(ownerId, ownedBook.getOwner());
                assertEquals("requested", ownedBook.getStatus());
                assertFalse(ownedBook.getScanned());
                assertNull(ownedBook.getUserBorrowing());
                assertTrue(ownedBook.getRequestingUsers().contains(borrower1Id));
                assertEquals(1, ownedBook.getRequestingUsers().size());
                assertTrue(ownedBook.getRemovedRequests().isEmpty());
            }

        }

        /* Cancel the only request. Borrowed and Owned Book status transition from 'requested' to 'available' */

        authenticate(borrower1); { // Tests BookController#cancelRequest with the book only having one request
            bookController.cancelRequest(book.getIsbn(), ownerId).get(5, TimeUnit.SECONDS);
        }

        /* Verify State */ {
            /* authenticate(borrower1); */ {
                Optional<BorrowedBook> borrowedBookOptional = bookController.getMyBorrowedBook(book.getIsbn()).get(5, TimeUnit.SECONDS);
                assertTrue(borrowedBookOptional.isEmpty());
            }

            OwnedBook ownedBook = bookController.getUserOwnedBook(book.getIsbn(), ownerId).get(5, TimeUnit.SECONDS).get(); // Tests BookController#getUserOwnedBook
            assertEquals(ownerId, ownedBook.getOwner());
            assertEquals("available", ownedBook.getStatus());
            assertFalse(ownedBook.getScanned());
            assertNull(ownedBook.getUserBorrowing());
            assertTrue(ownedBook.getRequestingUsers().isEmpty());
            assertTrue(ownedBook.getRemovedRequests().isEmpty());
        }

        /* Make a book request. Borrowed and Owned Book status transition from 'available' to 'requested' */

        authenticate(borrower1); {
            bookController.requestBook(book.getIsbn(), ownerId).get(5, TimeUnit.SECONDS);
        }

        /* Verify State */ {

            /* authenticate(borrower1); */ { // Tests BookController#getMyBorrowedBook
                BorrowedBook borrowedBook = bookController.getMyBorrowedBook(book.getIsbn()).get(5, TimeUnit.SECONDS).get();
                assertEquals(ownerId, borrowedBook.getOwner());
                assertEquals("requested", borrowedBook.getStatus());
                assertFalse(borrowedBook.getScanned());
            }

            authenticate(owner); { // Tests BookController#getMyOwnedBook
                OwnedBook ownedBook = bookController.getMyOwnedBook(book.getIsbn()).get(5, TimeUnit.SECONDS).get();
                assertEquals(ownerId, ownedBook.getOwner());
                assertEquals("requested", ownedBook.getStatus());
                assertFalse(ownedBook.getScanned());
                assertNull(ownedBook.getUserBorrowing());
                assertTrue(ownedBook.getRequestingUsers().contains(borrower1Id));
                assertEquals(1, ownedBook.getRequestingUsers().size());
                assertTrue(ownedBook.getRemovedRequests().isEmpty());
            }

        }

        /* Decline the only request. Borrowed and Owned Book status transition from 'requested' to 'available' */

        authenticate(owner); { // Tests BookController#declineRequest with the book only having one request
            bookController.declineRequest(book.getIsbn(), borrower1Id).get(5, TimeUnit.SECONDS);
        }

        /* Verify State */ {
            /* authenticate(borrower1); */ {
                Optional<BorrowedBook> borrowedBookOptional = bookController.getMyBorrowedBook(book.getIsbn()).get(5, TimeUnit.SECONDS);
                assertTrue(borrowedBookOptional.isEmpty());
            }

            OwnedBook ownedBook = bookController.getUserOwnedBook(book.getIsbn(), ownerId).get(5, TimeUnit.SECONDS).get(); // Tests BookController#getUserOwnedBook
            assertEquals(ownerId, ownedBook.getOwner());
            assertEquals("available", ownedBook.getStatus());
            assertFalse(ownedBook.getScanned());
            assertNull(ownedBook.getUserBorrowing());
            assertTrue(ownedBook.getRequestingUsers().isEmpty());
            assertTrue(ownedBook.getRemovedRequests().isEmpty());
        }

        /* Make multiple requests. Borrowed and Owned Book status transition from 'available' to 'requested' */

        // Tests BookController#requestBook with the book having multiple requests

        authenticate(borrower1); {
            bookController.requestBook(book.getIsbn(), ownerId).get(5, TimeUnit.SECONDS);
        }

        authenticate(borrower2); {
            bookController.requestBook(book.getIsbn(), ownerId).get(5, TimeUnit.SECONDS);
        }

        authenticate(borrower3); {
            bookController.requestBook(book.getIsbn(), ownerId).get(5, TimeUnit.SECONDS);
        }

        authenticate(borrower4); {
            bookController.requestBook(book.getIsbn(), ownerId).get(5, TimeUnit.SECONDS);
        }

        /* Verify State */ {
            /* authenticate(borrower4); */ {
                BorrowedBook borrowedBook = bookController.getMyBorrowedBook(book.getIsbn()).get(5, TimeUnit.SECONDS).get();
                assertEquals(ownerId, borrowedBook.getOwner());
                assertEquals("requested", borrowedBook.getStatus());
                assertFalse(borrowedBook.getScanned());
            }

            authenticate(borrower1); {
                BorrowedBook borrowedBook = bookController.getMyBorrowedBook(book.getIsbn()).get(5, TimeUnit.SECONDS).get();
                assertEquals(ownerId, borrowedBook.getOwner());
                assertEquals("requested", borrowedBook.getStatus());
                assertFalse(borrowedBook.getScanned());
            }

            authenticate(borrower2); {
                BorrowedBook borrowedBook = bookController.getMyBorrowedBook(book.getIsbn()).get(5, TimeUnit.SECONDS).get();
                assertEquals(ownerId, borrowedBook.getOwner());
                assertEquals("requested", borrowedBook.getStatus());
                assertFalse(borrowedBook.getScanned());
            }

            authenticate(borrower3); {
                BorrowedBook borrowedBook = bookController.getMyBorrowedBook(book.getIsbn()).get(5, TimeUnit.SECONDS).get();
                assertEquals(ownerId, borrowedBook.getOwner());
                assertEquals("requested", borrowedBook.getStatus());
                assertFalse(borrowedBook.getScanned());
            }

            OwnedBook ownedBook = bookController.getUserOwnedBook(book.getIsbn(), ownerId).get(5, TimeUnit.SECONDS).get();
            assertEquals(ownerId, ownedBook.getOwner());
            assertEquals("requested", ownedBook.getStatus());
            assertFalse(ownedBook.getScanned());
            assertNull(ownedBook.getUserBorrowing());
            assertTrue(ownedBook.getRequestingUsers().contains(borrower1Id));
            assertTrue(ownedBook.getRequestingUsers().contains(borrower2Id));
            assertTrue(ownedBook.getRequestingUsers().contains(borrower3Id));
            assertTrue(ownedBook.getRequestingUsers().contains(borrower4Id));
            assertEquals(4, ownedBook.getRequestingUsers().size());
            assertTrue(ownedBook.getRemovedRequests().isEmpty());
        }

        /* Cancel one of the requests. Borrowed and Owned Book status stay the same */

        authenticate(borrower4); { // Tests BookController#cancelRequest when there are multiple users requesting the book
            bookController.cancelRequest(book.getIsbn(), ownerId).get(5, TimeUnit.SECONDS);
        }

        /* Verify State */ {
            /* authenticate(borrower4); */ {
                Optional<BorrowedBook> borrowedBookOptional = bookController.getMyBorrowedBook(book.getIsbn()).get(5, TimeUnit.SECONDS);
                assertTrue(borrowedBookOptional.isEmpty());
            }

            authenticate(borrower1); {
                BorrowedBook borrowedBook = bookController.getMyBorrowedBook(book.getIsbn()).get(5, TimeUnit.SECONDS).get();
                assertEquals(ownerId, borrowedBook.getOwner());
                assertEquals("requested", borrowedBook.getStatus());
                assertFalse(borrowedBook.getScanned());
            }

            authenticate(borrower2); {
                BorrowedBook borrowedBook = bookController.getMyBorrowedBook(book.getIsbn()).get(5, TimeUnit.SECONDS).get();
                assertEquals(ownerId, borrowedBook.getOwner());
                assertEquals("requested", borrowedBook.getStatus());
                assertFalse(borrowedBook.getScanned());
            }

            authenticate(borrower3); {
                BorrowedBook borrowedBook = bookController.getMyBorrowedBook(book.getIsbn()).get(5, TimeUnit.SECONDS).get();
                assertEquals(ownerId, borrowedBook.getOwner());
                assertEquals("requested", borrowedBook.getStatus());
                assertFalse(borrowedBook.getScanned());
            }

            OwnedBook ownedBook = bookController.getUserOwnedBook(book.getIsbn(), ownerId).get(5, TimeUnit.SECONDS).get();
            assertEquals(ownerId, ownedBook.getOwner());
            assertEquals("requested", ownedBook.getStatus());
            assertFalse(ownedBook.getScanned());
            assertNull(ownedBook.getUserBorrowing());
            assertTrue(ownedBook.getRequestingUsers().contains(borrower1Id));
            assertTrue(ownedBook.getRequestingUsers().contains(borrower2Id));
            assertTrue(ownedBook.getRequestingUsers().contains(borrower3Id));
            assertEquals(3, ownedBook.getRequestingUsers().size());
            assertTrue(ownedBook.getRemovedRequests().isEmpty());
        }

        /* Decline one of the requests. Borrowed and Owned Book status stay the same */

        authenticate(owner); { // Tests BookController#declineRequest while having more than one request on the book
            bookController.declineRequest(book.getIsbn(), borrower3Id).get(5, TimeUnit.SECONDS);
        }

        /* Verify State */ {
            authenticate(borrower1); {
                BorrowedBook borrowedBook = bookController.getMyBorrowedBook(book.getIsbn()).get(5, TimeUnit.SECONDS).get();
                assertEquals(ownerId, borrowedBook.getOwner());
                assertEquals("requested", borrowedBook.getStatus());
                assertFalse(borrowedBook.getScanned());
            }

            authenticate(borrower2); {
                BorrowedBook borrowedBook = bookController.getMyBorrowedBook(book.getIsbn()).get(5, TimeUnit.SECONDS).get();
                assertEquals(ownerId, borrowedBook.getOwner());
                assertEquals("requested", borrowedBook.getStatus());
                assertFalse(borrowedBook.getScanned());
            }

            authenticate(borrower3); {
                Optional<BorrowedBook> borrowedBookOptional = bookController.getMyBorrowedBook(book.getIsbn()).get(5, TimeUnit.SECONDS);
                assertTrue(borrowedBookOptional.isEmpty());
            }

            OwnedBook ownedBook = bookController.getUserOwnedBook(book.getIsbn(), ownerId).get(5, TimeUnit.SECONDS).get();
            assertEquals(ownerId, ownedBook.getOwner());
            assertEquals("requested", ownedBook.getStatus());
            assertFalse(ownedBook.getScanned());
            assertNull(ownedBook.getUserBorrowing());
            assertTrue(ownedBook.getRequestingUsers().contains(borrower1Id));
            assertTrue(ownedBook.getRequestingUsers().contains(borrower2Id));
            assertEquals(2, ownedBook.getRequestingUsers().size());
            assertTrue(ownedBook.getRemovedRequests().isEmpty());
        }

        /* Accept one of the requests. Borrowed and Owned Book status transition from 'requested' to 'accepted' */

        authenticate(owner); { // Tests BookController#acceptRequest
            bookController.acceptRequest(book.getIsbn(), borrower1Id).get(5, TimeUnit.SECONDS);
        }

        /* Verify State */ {
            authenticate(borrower1); {
                BorrowedBook borrowedBook = bookController.getMyBorrowedBook(book.getIsbn()).get(5, TimeUnit.SECONDS).get();
                assertEquals(ownerId, borrowedBook.getOwner());
                assertEquals("accepted", borrowedBook.getStatus());
                assertFalse(borrowedBook.getScanned());
            }

            authenticate(borrower2); {
                Optional<BorrowedBook> borrowedBookOptional = bookController.getMyBorrowedBook(book.getIsbn()).get(5, TimeUnit.SECONDS);
                assertTrue(borrowedBookOptional.isEmpty());
            }

            OwnedBook ownedBook = bookController.getUserOwnedBook(book.getIsbn(), ownerId).get(5, TimeUnit.SECONDS).get();
            assertEquals(ownerId, ownedBook.getOwner());
            assertEquals("accepted", ownedBook.getStatus());
            assertFalse(ownedBook.getScanned());
            assertEquals(borrower1Id, ownedBook.getUserBorrowing());
            assertTrue(ownedBook.getRequestingUsers().isEmpty());
            assertTrue(ownedBook.getRemovedRequests().isEmpty());
        }

        /* Scan Borrowed Book. Borrowed Book becomes scanned */

        authenticate(borrower1); { // Tests BookController#scanMyBorrowedBook on an accepted borrowed book
            bookController.scanMyBorrowedBook(book.getIsbn()).get(5, TimeUnit.SECONDS);
        }

        /* Verify State */ {
            /* authenticate(borrower1); */ {
                BorrowedBook borrowedBook = bookController.getMyBorrowedBook(book.getIsbn()).get(5, TimeUnit.SECONDS).get();
                assertEquals(ownerId, borrowedBook.getOwner());
                assertEquals("accepted", borrowedBook.getStatus());
                assertTrue(borrowedBook.getScanned());
            }
        }

        /* Scan Owned Book. Owned Book becomes scanned */

        authenticate(owner); { // Tests BookController#scanMyOwnedBook on an accepted owned book
            bookController.scanMyOwnedBook(book.getIsbn()).get(5, TimeUnit.SECONDS);
        }

        /* Verify State */ {
            OwnedBook ownedBook = bookController.getUserOwnedBook(book.getIsbn(), ownerId).get(5, TimeUnit.SECONDS).get();
            assertEquals(ownerId, ownedBook.getOwner());
            assertEquals("accepted", ownedBook.getStatus());
            assertTrue(ownedBook.getScanned());
            assertEquals(borrower1Id, ownedBook.getUserBorrowing());
            assertTrue(ownedBook.getRequestingUsers().isEmpty());
            assertTrue(ownedBook.getRemovedRequests().isEmpty());
        }

        /* Exchange books. Borrowed and Owned Book status transitions from 'accepted' to 'borrowed' */

        bookController.exchangeBook(book.getIsbn(), ownerId).get(5, TimeUnit.SECONDS);

        /* Verify State */ {
            authenticate(borrower1); {
                BorrowedBook borrowedBook = bookController.getMyBorrowedBook(book.getIsbn()).get(5, TimeUnit.SECONDS).get();
                assertEquals(ownerId, borrowedBook.getOwner());
                assertEquals("borrowed", borrowedBook.getStatus());
                assertFalse(borrowedBook.getScanned());
            }

            OwnedBook ownedBook = bookController.getUserOwnedBook(book.getIsbn(), ownerId).get(5, TimeUnit.SECONDS).get();
            assertEquals(ownerId, ownedBook.getOwner());
            assertEquals("borrowed", ownedBook.getStatus());
            assertFalse(ownedBook.getScanned());
            assertEquals(borrower1Id, ownedBook.getUserBorrowing());
            assertTrue(ownedBook.getRequestingUsers().isEmpty());
            assertTrue(ownedBook.getRemovedRequests().isEmpty());
        }

        /* Scan Borrowed Book. Borrowed Book becomes scanned */

        authenticate(borrower1); { // Tests BookController#scanMyBorrowedBook on a borrowed borrowed book
            bookController.scanMyBorrowedBook(book.getIsbn()).get(5, TimeUnit.SECONDS);
        }

        /* Verify State */ {
            /* authenticate(borrower1); */ {
                BorrowedBook borrowedBook = bookController.getMyBorrowedBook(book.getIsbn()).get(5, TimeUnit.SECONDS).get();
                assertEquals(ownerId, borrowedBook.getOwner());
                assertEquals("borrowed", borrowedBook.getStatus());
                assertTrue(borrowedBook.getScanned());
            }
        }

        /* Scan Owned Book. Owned Book becomes scanned */

        authenticate(owner); { // Tests BookController#scanMyOwnedBook on a borrowed owned book
            bookController.scanMyOwnedBook(book.getIsbn()).get(5, TimeUnit.SECONDS);
        }

        /* Verify State */ {
            OwnedBook ownedBook = bookController.getUserOwnedBook(book.getIsbn(), ownerId).get(5, TimeUnit.SECONDS).get();
            assertEquals(ownerId, ownedBook.getOwner());
            assertEquals("borrowed", ownedBook.getStatus());
            assertTrue(ownedBook.getScanned());
            assertEquals(borrower1Id, ownedBook.getUserBorrowing());
            assertTrue(ownedBook.getRequestingUsers().isEmpty());
            assertTrue(ownedBook.getRemovedRequests().isEmpty());
        }

        /* Return book. Borrowed Book is gone. Owned Book status transitions from 'borrowed' to 'available' */

        bookController.returnBook(book.getIsbn(), ownerId).get(5, TimeUnit.SECONDS);

        /* Verify State */ {
            authenticate(borrower1); {
                Optional<BorrowedBook> borrowedBookOptional = bookController.getMyBorrowedBook(book.getIsbn()).get(5, TimeUnit.SECONDS);
                assertTrue(borrowedBookOptional.isEmpty());
            }

            OwnedBook ownedBook = bookController.getUserOwnedBook(book.getIsbn(), ownerId).get(5, TimeUnit.SECONDS).get();
            assertEquals(ownerId, ownedBook.getOwner());
            assertEquals("available", ownedBook.getStatus());
            assertFalse(ownedBook.getScanned());
            assertNull(ownedBook.getUserBorrowing());
            assertTrue(ownedBook.getRequestingUsers().isEmpty());
            assertTrue(ownedBook.getRemovedRequests().isEmpty());
        }

    }


    /* Other "core" methods not covered by testCoreTransactions */


    @Test
    public void testUpdateBook() throws InterruptedException, ExecutionException, TimeoutException {
        /* Dependencies (these methods are assumed to work correctly)
            -   BookController#getBook
            -   BookController#addBook
         */

        Book book = generateRandomBook();
        bookController.addBook(book).get(5, TimeUnit.SECONDS);

        book.setDescription("A test to update description. This book is safe to delete.");
        book.setAuthor("Book Controller Test");
        book.setTitle("An Updated Test Book");
        book.setImageId("test-image-id");

        bookController.updateBook(book).get(5, TimeUnit.SECONDS);

        Book actual = bookController.getBook(book.getIsbn()).get(5, TimeUnit.SECONDS).get();
        assertBooksEqual(book, actual);
    }

    /* Edge cases */

    @Test
    public void testGetNonExistingBook() throws InterruptedException, ExecutionException, TimeoutException {
        Book book = generateRandomBook();
        assertTrue(bookController.getBook(book.getIsbn()).get(5, TimeUnit.SECONDS).isEmpty());
    }

    @Test(expected = ExecutionException.class)
    public void testAddDuplicateBook() throws InterruptedException, ExecutionException, TimeoutException {
        Book book = generateRandomBook();
        bookController.addBook(book).get(5, TimeUnit.SECONDS);
        bookController.addBook(book).get(5, TimeUnit.SECONDS); // Should throw an ExecutionException due to the book already existing
    }

    @Test
    public void testGetMyOwnedBooks() throws InterruptedException, ExecutionException, TimeoutException {
        /* Dependencies (these methods are assumed to work correctly)
            -   BookController#addBook
            -   BookController#addMyOwnedBook
         */

        authenticate(generateRandomUser());

        Book book1 = generateRandomBook();
        Book book2 = generateRandomBook();
        Book book3 = generateRandomBook();

        bookController.addBook(book1).get(5, TimeUnit.SECONDS);
        bookController.addBook(book2).get(5, TimeUnit.SECONDS);
        bookController.addBook(book3).get(5, TimeUnit.SECONDS);

        bookController.addMyOwnedBook(new OwnedBook(book1.getIsbn())).get(5, TimeUnit.SECONDS);
        bookController.addMyOwnedBook(new OwnedBook(book2.getIsbn())).get(5, TimeUnit.SECONDS);
        bookController.addMyOwnedBook(new OwnedBook(book3.getIsbn())).get(5, TimeUnit.SECONDS);

        Collection<OwnedBook> ownedBookCollection = bookController.getMyOwnedBooks().get(5, TimeUnit.SECONDS);
        assertEquals(3, ownedBookCollection.size());
    }

}


